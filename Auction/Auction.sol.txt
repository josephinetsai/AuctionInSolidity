// SPDX-License-Identifier: GPL-3.0


pragma solidity >=0.8.9;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";



contract Auction{
    
    address payable owner;
    uint startBlock;
    uint endBlock;
    uint startPrice;
    uint highestBid;
    IERC721 public nft;
    uint public nftId;
    int numBids;
    
    bool public canceled;
    address public highestBidder;
    mapping(address => uint256) public bidList;
    bool ownerHasWithdrawn=false;
    
    
    event LogBid(address bidder, uint bid, address highestBidder, uint highestBid);
    event LogWin(address winner, uint purchasePrice);
    event LogLoserWithdrawal(address loser, uint withdrawalAmount);
    event LogCanceled();
    event LogDirectBuy(address buyer, uint purchase);
    
    
    constructor(address payable _owner, uint _startPrice, uint daysFromNow) {
        owner = _owner;
        startBlock = block.timestamp;
        endBlock = block.timestamp+block.timestamp+(daysFromNow* 1 days);
        startPrice=_startPrice;
        numBids=0;
    }
    
    function setNFT(address _nft, uint _nftId) public onlyOwner{
        nft=IERC721(_nft);
        nftId = _nftId;
    }
     
    function bid(address buyer, uint bidIncrease) payable public hasFunds(bidIncrease) onlyNotOwner(buyer) onlyBeforeEnd onlyNotCanceled{
        require(bidIncrease>0, "Must pay at least some WC");
        uint newBid = bidList[buyer] + bidIncrease;
        
        require(newBid>startPrice, "Cannot bid less than starting amount");
        require(newBid>highestBid, "New bid must be higher than previous highest.");
        bidList[buyer] = newBid;
        
        if (buyer != highestBidder) {
             highestBidder = buyer;
        }
        highestBid = newBid;
        
        emit LogBid(buyer, newBid, highestBidder, highestBid);
        numBids++;
        return;
        
    }
    
    function getOwner() view public returns (address){
        return owner;
    }
    
    function cancelAuction() onlyOwner onlyBeforeEnd onlyNotCanceled public returns (bool success){
        canceled = true;
        emit LogCanceled();
        return true;
    }
    
    function end() external payable onlyEnded{
        nft.safeTransferFrom(address(this), highestBidder, nftId);
        ownerHasWithdrawn=true;
        emit LogWin(highestBidder, bidList[highestBidder]);
        
        return;
            
    }
    
    function directBuy(address buyer, uint purchase) public onlyEnded noBids onlyNotOwner(buyer) hasFunds(purchase){
        uint priceStrike=3;
        uint price=startPrice-priceStrike; //listed for direct purchase at less than auction price.
        
        require(purchase>=price,"Cannot bid less than price.");
        
        nft.safeTransferFrom(owner, buyer, nftId);
        (payable(nft.ownerOf(nftId))).transfer(purchase);
        emit LogDirectBuy(buyer, purchase);
    }
    
    
    modifier noBids {
        require(numBids == 0, "No bids must have been made.");
        _;
    }
    
    modifier onlyOwner {
        require(owner == msg.sender, "You are not the owner.");
        _;
    }
    
     modifier onlyNotOwner(address bidder) {
        require(owner != bidder, "Owner of listing cannot bid.");
        _;
    }
    
    modifier hasFunds(uint bid){
        require(bid<=msg.sender.balance, "Insufficient funds.");
        _;
    }
    
    modifier onlyAfterStart {
        require(block.number >= startBlock-1, "Must wait for auction to start.");
        _;
    }
    
    modifier onlyBeforeStart {
        require(block.number < startBlock, "Auction cannot already have started.");
        _;
    }
    
    modifier onlyBeforeEnd {
        require(block.number <= endBlock, "Auction is condluded. Cannot bid.");
        _;
    }
    
    modifier onlyNotCanceled {
        require(canceled == false, "Auction cannot be canceled.");
        _;
    }
    
    modifier onlyEnded {
        require(block.number >= endBlock || canceled==true, "Listing must be concluded");
        _;
    }
    

    
    
    
    
}